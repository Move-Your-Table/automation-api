# Dockerfile for creating a statically-linked Rust application using docker's
# multi-stage build feature. This also leverages the docker build cache to avoid
# re-downloading dependencies if they have not changed.
FROM rust:1.57.0-bullseye AS build

# Install extra dependencies & Configure OpenSSL certificates
RUN apt update
RUN apt-get install openssl
RUN apt-get install libssl-dev
RUN apt-get install pkg-config

WORKDIR /usr/src

# Create a dummy project and build the app's dependencies.
# If the Cargo.toml or Cargo.lock files have not changed,
# we can use the docker build cache and skip these (typically slow) steps.
RUN USER=root cargo new automate-api
WORKDIR /usr/src/automate-api
COPY Cargo.toml Cargo.lock ./
RUN cargo build --release

# Copy the source and build the application.
COPY src ./src
RUN cargo install --path .

# Copy the statically-linked binary into a scratch container.
FROM debian:bullseye
COPY --from=build /usr/local/cargo/bin/automate-api .
USER 1000
CMD ["./automate-api"]

